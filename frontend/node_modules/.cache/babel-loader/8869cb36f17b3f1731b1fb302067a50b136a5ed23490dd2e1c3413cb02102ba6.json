{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst initialState = {\n  data: null,\n  status: 'idle',\n  error: null\n};\nexport const fetchAWSStatus = createAsyncThunk('awsServices/fetchStatus', async () => {\n  try {\n    const [servicesResponse, cpuResponse] = await Promise.all([fetch('http://localhost:5001/api/status'), fetch('http://localhost:5001/api/cpu-utilization')]);\n    if (!servicesResponse.ok || !cpuResponse.ok) {\n      throw new Error('Failed to fetch AWS status or CPU metrics');\n    }\n    const servicesData = await servicesResponse.json();\n    const cpuData = await cpuResponse.json();\n    return {\n      ...servicesData,\n      cpuMetrics: cpuData\n    };\n  } catch (error) {\n    console.error('Fetch error:', error);\n    throw error;\n  }\n});\nexport const fetchAllMetrics = createAsyncThunk('awsServices/fetchAllMetrics', async () => {\n  try {\n    const [basicMetrics, apmMetrics, cloudMetrics, rumMetrics] = await Promise.all([fetch('http://localhost:5001/api/status'), fetch('http://localhost:5001/api/apm-metrics'), fetch('http://localhost:5001/api/cloud-metrics'), fetch('http://localhost:5001/api/rum-metrics')]);\n    return {\n      basic: await basicMetrics.json(),\n      apm: await apmMetrics.json(),\n      cloud: await cloudMetrics.json(),\n      rum: await rumMetrics.json()\n    };\n  } catch (error) {\n    throw error;\n  }\n});\nconst awsServicesSlice = createSlice({\n  name: 'awsServices',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchAWSStatus.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchAWSStatus.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.data = action.payload;\n      state.error = null;\n    }).addCase(fetchAWSStatus.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport default awsServicesSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","data","status","error","fetchAWSStatus","servicesResponse","cpuResponse","Promise","all","fetch","ok","Error","servicesData","json","cpuData","cpuMetrics","console","fetchAllMetrics","basicMetrics","apmMetrics","cloudMetrics","rumMetrics","basic","apm","cloud","rum","awsServicesSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","reducer"],"sources":["/Users/pradeepn/monitoringservice/aws-monitor/frontend/src/features/awsServices/awsServicesSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nconst initialState = {\n  data: null,\n  status: 'idle',\n  error: null\n};\n\nexport const fetchAWSStatus = createAsyncThunk(\n  'awsServices/fetchStatus',\n  async () => {\n    try {\n      const [servicesResponse, cpuResponse] = await Promise.all([\n        fetch('http://localhost:5001/api/status'),\n        fetch('http://localhost:5001/api/cpu-utilization')\n      ]);\n\n      if (!servicesResponse.ok || !cpuResponse.ok) {\n        throw new Error('Failed to fetch AWS status or CPU metrics');\n      }\n\n      const servicesData = await servicesResponse.json();\n      const cpuData = await cpuResponse.json();\n\n      return {\n        ...servicesData,\n        cpuMetrics: cpuData\n      };\n    } catch (error) {\n      console.error('Fetch error:', error);\n      throw error;\n    }\n  }\n);\n\nexport const fetchAllMetrics = createAsyncThunk(\n    'awsServices/fetchAllMetrics',\n    async () => {\n        try {\n            const [basicMetrics, apmMetrics, cloudMetrics, rumMetrics] = await Promise.all([\n                fetch('http://localhost:5001/api/status'),\n                fetch('http://localhost:5001/api/apm-metrics'),\n                fetch('http://localhost:5001/api/cloud-metrics'),\n                fetch('http://localhost:5001/api/rum-metrics')\n            ]);\n\n            return {\n                basic: await basicMetrics.json(),\n                apm: await apmMetrics.json(),\n                cloud: await cloudMetrics.json(),\n                rum: await rumMetrics.json()\n            };\n        } catch (error) {\n            throw error;\n        }\n    }\n);\n\nconst awsServicesSlice = createSlice({\n  name: 'awsServices',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchAWSStatus.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchAWSStatus.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.data = action.payload;\n        state.error = null;\n      })\n      .addCase(fetchAWSStatus.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      });\n  },\n});\n\nexport default awsServicesSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE,IAAI;EACVC,MAAM,EAAE,MAAM;EACdC,KAAK,EAAE;AACT,CAAC;AAED,OAAO,MAAMC,cAAc,GAAGL,gBAAgB,CAC5C,yBAAyB,EACzB,YAAY;EACV,IAAI;IACF,MAAM,CAACM,gBAAgB,EAAEC,WAAW,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CACxDC,KAAK,CAAC,kCAAkC,CAAC,EACzCA,KAAK,CAAC,2CAA2C,CAAC,CACnD,CAAC;IAEF,IAAI,CAACJ,gBAAgB,CAACK,EAAE,IAAI,CAACJ,WAAW,CAACI,EAAE,EAAE;MAC3C,MAAM,IAAIC,KAAK,CAAC,2CAA2C,CAAC;IAC9D;IAEA,MAAMC,YAAY,GAAG,MAAMP,gBAAgB,CAACQ,IAAI,CAAC,CAAC;IAClD,MAAMC,OAAO,GAAG,MAAMR,WAAW,CAACO,IAAI,CAAC,CAAC;IAExC,OAAO;MACL,GAAGD,YAAY;MACfG,UAAU,EAAED;IACd,CAAC;EACH,CAAC,CAAC,OAAOX,KAAK,EAAE;IACda,OAAO,CAACb,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACpC,MAAMA,KAAK;EACb;AACF,CACF,CAAC;AAED,OAAO,MAAMc,eAAe,GAAGlB,gBAAgB,CAC3C,6BAA6B,EAC7B,YAAY;EACR,IAAI;IACA,MAAM,CAACmB,YAAY,EAAEC,UAAU,EAAEC,YAAY,EAAEC,UAAU,CAAC,GAAG,MAAMd,OAAO,CAACC,GAAG,CAAC,CAC3EC,KAAK,CAAC,kCAAkC,CAAC,EACzCA,KAAK,CAAC,uCAAuC,CAAC,EAC9CA,KAAK,CAAC,yCAAyC,CAAC,EAChDA,KAAK,CAAC,uCAAuC,CAAC,CACjD,CAAC;IAEF,OAAO;MACHa,KAAK,EAAE,MAAMJ,YAAY,CAACL,IAAI,CAAC,CAAC;MAChCU,GAAG,EAAE,MAAMJ,UAAU,CAACN,IAAI,CAAC,CAAC;MAC5BW,KAAK,EAAE,MAAMJ,YAAY,CAACP,IAAI,CAAC,CAAC;MAChCY,GAAG,EAAE,MAAMJ,UAAU,CAACR,IAAI,CAAC;IAC/B,CAAC;EACL,CAAC,CAAC,OAAOV,KAAK,EAAE;IACZ,MAAMA,KAAK;EACf;AACJ,CACJ,CAAC;AAED,MAAMuB,gBAAgB,GAAG5B,WAAW,CAAC;EACnC6B,IAAI,EAAE,aAAa;EACnB3B,YAAY;EACZ4B,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAAC3B,cAAc,CAAC4B,OAAO,EAAGC,KAAK,IAAK;MAC1CA,KAAK,CAAC/B,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACD6B,OAAO,CAAC3B,cAAc,CAAC8B,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACpDF,KAAK,CAAC/B,MAAM,GAAG,WAAW;MAC1B+B,KAAK,CAAChC,IAAI,GAAGkC,MAAM,CAACC,OAAO;MAC3BH,KAAK,CAAC9B,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACD4B,OAAO,CAAC3B,cAAc,CAACiC,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MACnDF,KAAK,CAAC/B,MAAM,GAAG,QAAQ;MACvB+B,KAAK,CAAC9B,KAAK,GAAGgC,MAAM,CAAChC,KAAK,CAACmC,OAAO;IACpC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAeZ,gBAAgB,CAACa,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}