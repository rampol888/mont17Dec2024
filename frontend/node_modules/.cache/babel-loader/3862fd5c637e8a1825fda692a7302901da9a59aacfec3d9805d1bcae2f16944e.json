{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst initialState = {\n  data: {\n    ec2: [],\n    rds: [],\n    apm: null,\n    rum: null,\n    cloudMetrics: null,\n    cpuMetrics: null,\n    status: null\n  },\n  status: 'idle',\n  error: null\n};\n\n// Fetch AWS Status and Instances\nexport const fetchAWSStatus = createAsyncThunk('awsServices/fetchStatus', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const responses = await Promise.all([fetch('http://localhost:5001/api/status'), fetch('http://localhost:5001/api/instances'), fetch('http://localhost:5001/api/rds-instances')]);\n\n    // Check if any response failed\n    for (const response of responses) {\n      if (!response.ok) {\n        throw new Error(`API Error: ${response.status} - ${response.statusText}`);\n      }\n    }\n    const [status, instances, rds] = await Promise.all(responses.map(res => res.json()));\n    return {\n      status,\n      ec2: instances,\n      rds\n    };\n  } catch (error) {\n    console.error('Fetch AWS Status error:', error);\n    return rejectWithValue(error.message);\n  }\n});\n\n// Fetch Monitoring Metrics\nexport const fetchAllMetrics = createAsyncThunk('awsServices/fetchAllMetrics', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const responses = await Promise.all([fetch('http://localhost:5001/api/apm-metrics'), fetch('http://localhost:5001/api/rum-metrics')]);\n\n    // Check if any response failed\n    for (const response of responses) {\n      if (!response.ok) {\n        throw new Error(`API Error: ${response.status} - ${response.statusText}`);\n      }\n    }\n    const [apm, rum] = await Promise.all(responses.map(res => res.json()));\n    return {\n      apm,\n      rum\n    };\n  } catch (error) {\n    console.error('Fetch Metrics error:', error);\n    return rejectWithValue(error.message);\n  }\n});\nconst awsServicesSlice = createSlice({\n  name: 'awsServices',\n  initialState,\n  reducers: {\n    clearErrors: state => {\n      state.error = null;\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // Handle fetchAWSStatus\n    .addCase(fetchAWSStatus.pending, state => {\n      state.status = 'loading';\n      state.error = null;\n    }).addCase(fetchAWSStatus.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.data = {\n        ...state.data,\n        ...action.payload\n      };\n      state.error = null;\n    }).addCase(fetchAWSStatus.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload || 'Failed to fetch AWS data';\n    })\n    // Handle fetchAllMetrics\n    .addCase(fetchAllMetrics.pending, state => {\n      state.status = 'loading';\n      state.error = null;\n    }).addCase(fetchAllMetrics.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.data = {\n        ...state.data,\n        ...action.payload\n      };\n      state.error = null;\n    }).addCase(fetchAllMetrics.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload || 'Failed to fetch metrics';\n    });\n  }\n});\n\n// Actions\nexport const {\n  clearErrors\n} = awsServicesSlice.actions;\n\n// Selectors\nexport const selectEC2Instances = state => state.awsServices.data.ec2 || [];\nexport const selectRDSInstances = state => state.awsServices.data.rds || [];\nexport const selectAPMMetrics = state => state.awsServices.data.apm;\nexport const selectRUMMetrics = state => state.awsServices.data.rum;\nexport const selectStatus = state => state.awsServices.status;\nexport const selectError = state => state.awsServices.error;\nexport const selectAWSStatus = state => state.awsServices.data.status;\nexport default awsServicesSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","data","ec2","rds","apm","rum","cloudMetrics","cpuMetrics","status","error","fetchAWSStatus","_","rejectWithValue","responses","Promise","all","fetch","response","ok","Error","statusText","instances","map","res","json","console","message","fetchAllMetrics","awsServicesSlice","name","reducers","clearErrors","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","selectEC2Instances","awsServices","selectRDSInstances","selectAPMMetrics","selectRUMMetrics","selectStatus","selectError","selectAWSStatus","reducer"],"sources":["/Users/pradeepn/monitoringservice/aws-monitor/frontend/src/features/awsServices/awsServicesSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nconst initialState = {\n  data: {\n    ec2: [],\n    rds: [],\n    apm: null,\n    rum: null,\n    cloudMetrics: null,\n    cpuMetrics: null,\n    status: null\n  },\n  status: 'idle',\n  error: null\n};\n\n// Fetch AWS Status and Instances\nexport const fetchAWSStatus = createAsyncThunk(\n  'awsServices/fetchStatus',\n  async (_, { rejectWithValue }) => {\n    try {\n      const responses = await Promise.all([\n        fetch('http://localhost:5001/api/status'),\n        fetch('http://localhost:5001/api/instances'),\n        fetch('http://localhost:5001/api/rds-instances')\n      ]);\n\n      // Check if any response failed\n      for (const response of responses) {\n        if (!response.ok) {\n          throw new Error(`API Error: ${response.status} - ${response.statusText}`);\n        }\n      }\n\n      const [status, instances, rds] = await Promise.all(\n        responses.map(res => res.json())\n      );\n\n      return {\n        status,\n        ec2: instances,\n        rds\n      };\n    } catch (error) {\n      console.error('Fetch AWS Status error:', error);\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\n// Fetch Monitoring Metrics\nexport const fetchAllMetrics = createAsyncThunk(\n  'awsServices/fetchAllMetrics',\n  async (_, { rejectWithValue }) => {\n    try {\n      const responses = await Promise.all([\n        fetch('http://localhost:5001/api/apm-metrics'),\n        fetch('http://localhost:5001/api/rum-metrics')\n      ]);\n\n      // Check if any response failed\n      for (const response of responses) {\n        if (!response.ok) {\n          throw new Error(`API Error: ${response.status} - ${response.statusText}`);\n        }\n      }\n\n      const [apm, rum] = await Promise.all(\n        responses.map(res => res.json())\n      );\n\n      return {\n        apm,\n        rum\n      };\n    } catch (error) {\n      console.error('Fetch Metrics error:', error);\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\nconst awsServicesSlice = createSlice({\n  name: 'awsServices',\n  initialState,\n  reducers: {\n    clearErrors: (state) => {\n      state.error = null;\n    }\n  },\n  extraReducers: (builder) => {\n    builder\n      // Handle fetchAWSStatus\n      .addCase(fetchAWSStatus.pending, (state) => {\n        state.status = 'loading';\n        state.error = null;\n      })\n      .addCase(fetchAWSStatus.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.data = {\n          ...state.data,\n          ...action.payload\n        };\n        state.error = null;\n      })\n      .addCase(fetchAWSStatus.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.payload || 'Failed to fetch AWS data';\n      })\n      // Handle fetchAllMetrics\n      .addCase(fetchAllMetrics.pending, (state) => {\n        state.status = 'loading';\n        state.error = null;\n      })\n      .addCase(fetchAllMetrics.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.data = {\n          ...state.data,\n          ...action.payload\n        };\n        state.error = null;\n      })\n      .addCase(fetchAllMetrics.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.payload || 'Failed to fetch metrics';\n      });\n  },\n});\n\n// Actions\nexport const { clearErrors } = awsServicesSlice.actions;\n\n// Selectors\nexport const selectEC2Instances = state => state.awsServices.data.ec2 || [];\nexport const selectRDSInstances = state => state.awsServices.data.rds || [];\nexport const selectAPMMetrics = state => state.awsServices.data.apm;\nexport const selectRUMMetrics = state => state.awsServices.data.rum;\nexport const selectStatus = state => state.awsServices.status;\nexport const selectError = state => state.awsServices.error;\nexport const selectAWSStatus = state => state.awsServices.data.status;\n\nexport default awsServicesSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE;IACJC,GAAG,EAAE,EAAE;IACPC,GAAG,EAAE,EAAE;IACPC,GAAG,EAAE,IAAI;IACTC,GAAG,EAAE,IAAI;IACTC,YAAY,EAAE,IAAI;IAClBC,UAAU,EAAE,IAAI;IAChBC,MAAM,EAAE;EACV,CAAC;EACDA,MAAM,EAAE,MAAM;EACdC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAGX,gBAAgB,CAC5C,yBAAyB,EACzB,OAAOY,CAAC,EAAE;EAAEC;AAAgB,CAAC,KAAK;EAChC,IAAI;IACF,MAAMC,SAAS,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAClCC,KAAK,CAAC,kCAAkC,CAAC,EACzCA,KAAK,CAAC,qCAAqC,CAAC,EAC5CA,KAAK,CAAC,yCAAyC,CAAC,CACjD,CAAC;;IAEF;IACA,KAAK,MAAMC,QAAQ,IAAIJ,SAAS,EAAE;MAChC,IAAI,CAACI,QAAQ,CAACC,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,cAAcF,QAAQ,CAACT,MAAM,MAAMS,QAAQ,CAACG,UAAU,EAAE,CAAC;MAC3E;IACF;IAEA,MAAM,CAACZ,MAAM,EAAEa,SAAS,EAAElB,GAAG,CAAC,GAAG,MAAMW,OAAO,CAACC,GAAG,CAChDF,SAAS,CAACS,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CACjC,CAAC;IAED,OAAO;MACLhB,MAAM;MACNN,GAAG,EAAEmB,SAAS;MACdlB;IACF,CAAC;EACH,CAAC,CAAC,OAAOM,KAAK,EAAE;IACdgB,OAAO,CAAChB,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,OAAOG,eAAe,CAACH,KAAK,CAACiB,OAAO,CAAC;EACvC;AACF,CACF,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAG5B,gBAAgB,CAC7C,6BAA6B,EAC7B,OAAOY,CAAC,EAAE;EAAEC;AAAgB,CAAC,KAAK;EAChC,IAAI;IACF,MAAMC,SAAS,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAClCC,KAAK,CAAC,uCAAuC,CAAC,EAC9CA,KAAK,CAAC,uCAAuC,CAAC,CAC/C,CAAC;;IAEF;IACA,KAAK,MAAMC,QAAQ,IAAIJ,SAAS,EAAE;MAChC,IAAI,CAACI,QAAQ,CAACC,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,cAAcF,QAAQ,CAACT,MAAM,MAAMS,QAAQ,CAACG,UAAU,EAAE,CAAC;MAC3E;IACF;IAEA,MAAM,CAAChB,GAAG,EAAEC,GAAG,CAAC,GAAG,MAAMS,OAAO,CAACC,GAAG,CAClCF,SAAS,CAACS,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CACjC,CAAC;IAED,OAAO;MACLpB,GAAG;MACHC;IACF,CAAC;EACH,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdgB,OAAO,CAAChB,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,OAAOG,eAAe,CAACH,KAAK,CAACiB,OAAO,CAAC;EACvC;AACF,CACF,CAAC;AAED,MAAME,gBAAgB,GAAG9B,WAAW,CAAC;EACnC+B,IAAI,EAAE,aAAa;EACnB7B,YAAY;EACZ8B,QAAQ,EAAE;IACRC,WAAW,EAAGC,KAAK,IAAK;MACtBA,KAAK,CAACvB,KAAK,GAAG,IAAI;IACpB;EACF,CAAC;EACDwB,aAAa,EAAGC,OAAO,IAAK;IAC1BA;IACE;IAAA,CACCC,OAAO,CAACzB,cAAc,CAAC0B,OAAO,EAAGJ,KAAK,IAAK;MAC1CA,KAAK,CAACxB,MAAM,GAAG,SAAS;MACxBwB,KAAK,CAACvB,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACD0B,OAAO,CAACzB,cAAc,CAAC2B,SAAS,EAAE,CAACL,KAAK,EAAEM,MAAM,KAAK;MACpDN,KAAK,CAACxB,MAAM,GAAG,WAAW;MAC1BwB,KAAK,CAAC/B,IAAI,GAAG;QACX,GAAG+B,KAAK,CAAC/B,IAAI;QACb,GAAGqC,MAAM,CAACC;MACZ,CAAC;MACDP,KAAK,CAACvB,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACD0B,OAAO,CAACzB,cAAc,CAAC8B,QAAQ,EAAE,CAACR,KAAK,EAAEM,MAAM,KAAK;MACnDN,KAAK,CAACxB,MAAM,GAAG,QAAQ;MACvBwB,KAAK,CAACvB,KAAK,GAAG6B,MAAM,CAACC,OAAO,IAAI,0BAA0B;IAC5D,CAAC;IACD;IAAA,CACCJ,OAAO,CAACR,eAAe,CAACS,OAAO,EAAGJ,KAAK,IAAK;MAC3CA,KAAK,CAACxB,MAAM,GAAG,SAAS;MACxBwB,KAAK,CAACvB,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACD0B,OAAO,CAACR,eAAe,CAACU,SAAS,EAAE,CAACL,KAAK,EAAEM,MAAM,KAAK;MACrDN,KAAK,CAACxB,MAAM,GAAG,WAAW;MAC1BwB,KAAK,CAAC/B,IAAI,GAAG;QACX,GAAG+B,KAAK,CAAC/B,IAAI;QACb,GAAGqC,MAAM,CAACC;MACZ,CAAC;MACDP,KAAK,CAACvB,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACD0B,OAAO,CAACR,eAAe,CAACa,QAAQ,EAAE,CAACR,KAAK,EAAEM,MAAM,KAAK;MACpDN,KAAK,CAACxB,MAAM,GAAG,QAAQ;MACvBwB,KAAK,CAACvB,KAAK,GAAG6B,MAAM,CAACC,OAAO,IAAI,yBAAyB;IAC3D,CAAC,CAAC;EACN;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAER;AAAY,CAAC,GAAGH,gBAAgB,CAACa,OAAO;;AAEvD;AACA,OAAO,MAAMC,kBAAkB,GAAGV,KAAK,IAAIA,KAAK,CAACW,WAAW,CAAC1C,IAAI,CAACC,GAAG,IAAI,EAAE;AAC3E,OAAO,MAAM0C,kBAAkB,GAAGZ,KAAK,IAAIA,KAAK,CAACW,WAAW,CAAC1C,IAAI,CAACE,GAAG,IAAI,EAAE;AAC3E,OAAO,MAAM0C,gBAAgB,GAAGb,KAAK,IAAIA,KAAK,CAACW,WAAW,CAAC1C,IAAI,CAACG,GAAG;AACnE,OAAO,MAAM0C,gBAAgB,GAAGd,KAAK,IAAIA,KAAK,CAACW,WAAW,CAAC1C,IAAI,CAACI,GAAG;AACnE,OAAO,MAAM0C,YAAY,GAAGf,KAAK,IAAIA,KAAK,CAACW,WAAW,CAACnC,MAAM;AAC7D,OAAO,MAAMwC,WAAW,GAAGhB,KAAK,IAAIA,KAAK,CAACW,WAAW,CAAClC,KAAK;AAC3D,OAAO,MAAMwC,eAAe,GAAGjB,KAAK,IAAIA,KAAK,CAACW,WAAW,CAAC1C,IAAI,CAACO,MAAM;AAErE,eAAeoB,gBAAgB,CAACsB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}