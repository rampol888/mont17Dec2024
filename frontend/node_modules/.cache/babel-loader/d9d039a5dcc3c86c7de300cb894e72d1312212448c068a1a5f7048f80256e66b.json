{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst initialState = {\n  data: null,\n  status: 'idle',\n  error: null\n};\nexport const fetchAWSStatus = createAsyncThunk('awsServices/fetchStatus', async () => {\n  try {\n    const [servicesResponse, cpuResponse] = await Promise.all([fetch('http://localhost:5001/api/status'), fetch('http://localhost:5001/api/cpu-utilization')]);\n    if (!servicesResponse.ok || !cpuResponse.ok) {\n      throw new Error('Failed to fetch AWS status or CPU metrics');\n    }\n    const servicesData = await servicesResponse.json();\n    const cpuData = await cpuResponse.json();\n    return {\n      ...servicesData,\n      cpuMetrics: cpuData\n    };\n  } catch (error) {\n    console.error('Fetch error:', error);\n    throw error;\n  }\n});\nconst awsServicesSlice = createSlice({\n  name: 'awsServices',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchAWSStatus.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchAWSStatus.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.data = action.payload;\n      state.error = null;\n    }).addCase(fetchAWSStatus.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport default awsServicesSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","data","status","error","fetchAWSStatus","servicesResponse","cpuResponse","Promise","all","fetch","ok","Error","servicesData","json","cpuData","cpuMetrics","console","awsServicesSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","reducer"],"sources":["/Users/pradeepn/monitoringservice/aws-monitor/frontend/src/features/awsServices/awsServicesSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nconst initialState = {\n  data: null,\n  status: 'idle',\n  error: null\n};\n\nexport const fetchAWSStatus = createAsyncThunk(\n  'awsServices/fetchStatus',\n  async () => {\n    try {\n      const [servicesResponse, cpuResponse] = await Promise.all([\n        fetch('http://localhost:5001/api/status'),\n        fetch('http://localhost:5001/api/cpu-utilization')\n      ]);\n\n      if (!servicesResponse.ok || !cpuResponse.ok) {\n        throw new Error('Failed to fetch AWS status or CPU metrics');\n      }\n\n      const servicesData = await servicesResponse.json();\n      const cpuData = await cpuResponse.json();\n\n      return {\n        ...servicesData,\n        cpuMetrics: cpuData\n      };\n    } catch (error) {\n      console.error('Fetch error:', error);\n      throw error;\n    }\n  }\n);\n\nconst awsServicesSlice = createSlice({\n  name: 'awsServices',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchAWSStatus.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchAWSStatus.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.data = action.payload;\n        state.error = null;\n      })\n      .addCase(fetchAWSStatus.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      });\n  },\n});\n\nexport default awsServicesSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE,IAAI;EACVC,MAAM,EAAE,MAAM;EACdC,KAAK,EAAE;AACT,CAAC;AAED,OAAO,MAAMC,cAAc,GAAGL,gBAAgB,CAC5C,yBAAyB,EACzB,YAAY;EACV,IAAI;IACF,MAAM,CAACM,gBAAgB,EAAEC,WAAW,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CACxDC,KAAK,CAAC,kCAAkC,CAAC,EACzCA,KAAK,CAAC,2CAA2C,CAAC,CACnD,CAAC;IAEF,IAAI,CAACJ,gBAAgB,CAACK,EAAE,IAAI,CAACJ,WAAW,CAACI,EAAE,EAAE;MAC3C,MAAM,IAAIC,KAAK,CAAC,2CAA2C,CAAC;IAC9D;IAEA,MAAMC,YAAY,GAAG,MAAMP,gBAAgB,CAACQ,IAAI,CAAC,CAAC;IAClD,MAAMC,OAAO,GAAG,MAAMR,WAAW,CAACO,IAAI,CAAC,CAAC;IAExC,OAAO;MACL,GAAGD,YAAY;MACfG,UAAU,EAAED;IACd,CAAC;EACH,CAAC,CAAC,OAAOX,KAAK,EAAE;IACda,OAAO,CAACb,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACpC,MAAMA,KAAK;EACb;AACF,CACF,CAAC;AAED,MAAMc,gBAAgB,GAAGnB,WAAW,CAAC;EACnCoB,IAAI,EAAE,aAAa;EACnBlB,YAAY;EACZmB,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAAClB,cAAc,CAACmB,OAAO,EAAGC,KAAK,IAAK;MAC1CA,KAAK,CAACtB,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDoB,OAAO,CAAClB,cAAc,CAACqB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACpDF,KAAK,CAACtB,MAAM,GAAG,WAAW;MAC1BsB,KAAK,CAACvB,IAAI,GAAGyB,MAAM,CAACC,OAAO;MAC3BH,KAAK,CAACrB,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACDmB,OAAO,CAAClB,cAAc,CAACwB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MACnDF,KAAK,CAACtB,MAAM,GAAG,QAAQ;MACvBsB,KAAK,CAACrB,KAAK,GAAGuB,MAAM,CAACvB,KAAK,CAAC0B,OAAO;IACpC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAeZ,gBAAgB,CAACa,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}