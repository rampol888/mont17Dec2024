{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst initialState = {\n  data: {\n    ec2: [],\n    rds: [],\n    apm: null,\n    rum: null,\n    cloudMetrics: null,\n    cpuMetrics: null\n  },\n  status: 'idle',\n  error: null\n};\n\n// Fetch EC2 and RDS instance data\nexport const fetchAWSStatus = createAsyncThunk('awsServices/fetchStatus', async () => {\n  try {\n    const responses = await Promise.all([fetch('http://localhost:5001/api/status'), fetch('http://localhost:5001/api/cpu-utilization'), fetch('http://localhost:5001/api/instances'),\n    // Add this endpoint to your backend\n    fetch('http://localhost:5001/api/rds-instances') // Add this endpoint to your backend\n    ]);\n    const [statusRes, cpuRes, ec2Res, rdsRes] = responses;\n    if (!responses.every(res => res.ok)) {\n      throw new Error('Failed to fetch one or more AWS metrics');\n    }\n    const [statusData, cpuData, ec2Data, rdsData] = await Promise.all([statusRes.json(), cpuRes.json(), ec2Res.json(), rdsRes.json()]);\n    return {\n      ...statusData,\n      cpuMetrics: cpuData,\n      ec2: ec2Data,\n      rds: rdsData\n    };\n  } catch (error) {\n    console.error('Fetch error:', error);\n    throw error;\n  }\n});\n\n// Fetch all monitoring metrics\nexport const fetchAllMetrics = createAsyncThunk('awsServices/fetchAllMetrics', async () => {\n  try {\n    const responses = await Promise.all([fetch('http://localhost:5001/api/status'), fetch('http://localhost:5001/api/apm-metrics'), fetch('http://localhost:5001/api/cloud-metrics'), fetch('http://localhost:5001/api/rum-metrics'), fetch('http://localhost:5001/api/db-metrics'), fetch('http://localhost:5001/api/disk-metrics')]);\n    if (!responses.every(res => res.ok)) {\n      throw new Error('Failed to fetch one or more metrics');\n    }\n    const [basic, apm, cloud, rum, db, disk] = await Promise.all(responses.map(res => res.json()));\n    return {\n      basic,\n      apm,\n      cloud,\n      rum,\n      dbMetrics: db,\n      diskMetrics: disk\n    };\n  } catch (error) {\n    console.error('Fetch error:', error);\n    throw error;\n  }\n});\nconst awsServicesSlice = createSlice({\n  name: 'awsServices',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder\n    // Handle fetchAWSStatus\n    .addCase(fetchAWSStatus.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchAWSStatus.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.data = {\n        ...state.data,\n        ...action.payload\n      };\n      state.error = null;\n    }).addCase(fetchAWSStatus.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    })\n    // Handle fetchAllMetrics\n    .addCase(fetchAllMetrics.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchAllMetrics.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.data = {\n        ...state.data,\n        ...action.payload\n      };\n      state.error = null;\n    }).addCase(fetchAllMetrics.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\n\n// Selectors\nexport const selectEC2Instances = state => state.awsServices.data.ec2 || [];\nexport const selectRDSInstances = state => state.awsServices.data.rds || [];\nexport const selectAPMMetrics = state => state.awsServices.data.apm;\nexport const selectRUMMetrics = state => state.awsServices.data.rum;\nexport const selectStatus = state => state.awsServices.status;\nexport const selectError = state => state.awsServices.error;\nexport default awsServicesSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","data","ec2","rds","apm","rum","cloudMetrics","cpuMetrics","status","error","fetchAWSStatus","responses","Promise","all","fetch","statusRes","cpuRes","ec2Res","rdsRes","every","res","ok","Error","statusData","cpuData","ec2Data","rdsData","json","console","fetchAllMetrics","basic","cloud","db","disk","map","dbMetrics","diskMetrics","awsServicesSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","selectEC2Instances","awsServices","selectRDSInstances","selectAPMMetrics","selectRUMMetrics","selectStatus","selectError","reducer"],"sources":["/Users/pradeepn/monitoringservice/aws-monitor/frontend/src/features/awsServices/awsServicesSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nconst initialState = {\n  data: {\n    ec2: [],\n    rds: [],\n    apm: null,\n    rum: null,\n    cloudMetrics: null,\n    cpuMetrics: null\n  },\n  status: 'idle',\n  error: null\n};\n\n// Fetch EC2 and RDS instance data\nexport const fetchAWSStatus = createAsyncThunk(\n  'awsServices/fetchStatus',\n  async () => {\n    try {\n      const responses = await Promise.all([\n        fetch('http://localhost:5001/api/status'),\n        fetch('http://localhost:5001/api/cpu-utilization'),\n        fetch('http://localhost:5001/api/instances'), // Add this endpoint to your backend\n        fetch('http://localhost:5001/api/rds-instances') // Add this endpoint to your backend\n      ]);\n\n      const [statusRes, cpuRes, ec2Res, rdsRes] = responses;\n\n      if (!responses.every(res => res.ok)) {\n        throw new Error('Failed to fetch one or more AWS metrics');\n      }\n\n      const [statusData, cpuData, ec2Data, rdsData] = await Promise.all([\n        statusRes.json(),\n        cpuRes.json(),\n        ec2Res.json(),\n        rdsRes.json()\n      ]);\n\n      return {\n        ...statusData,\n        cpuMetrics: cpuData,\n        ec2: ec2Data,\n        rds: rdsData\n      };\n    } catch (error) {\n      console.error('Fetch error:', error);\n      throw error;\n    }\n  }\n);\n\n// Fetch all monitoring metrics\nexport const fetchAllMetrics = createAsyncThunk(\n  'awsServices/fetchAllMetrics',\n  async () => {\n    try {\n      const responses = await Promise.all([\n        fetch('http://localhost:5001/api/status'),\n        fetch('http://localhost:5001/api/apm-metrics'),\n        fetch('http://localhost:5001/api/cloud-metrics'),\n        fetch('http://localhost:5001/api/rum-metrics'),\n        fetch('http://localhost:5001/api/db-metrics'),\n        fetch('http://localhost:5001/api/disk-metrics')\n      ]);\n\n      if (!responses.every(res => res.ok)) {\n        throw new Error('Failed to fetch one or more metrics');\n      }\n\n      const [basic, apm, cloud, rum, db, disk] = await Promise.all(\n        responses.map(res => res.json())\n      );\n\n      return {\n        basic,\n        apm,\n        cloud,\n        rum,\n        dbMetrics: db,\n        diskMetrics: disk\n      };\n    } catch (error) {\n      console.error('Fetch error:', error);\n      throw error;\n    }\n  }\n);\n\nconst awsServicesSlice = createSlice({\n  name: 'awsServices',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      // Handle fetchAWSStatus\n      .addCase(fetchAWSStatus.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchAWSStatus.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.data = {\n          ...state.data,\n          ...action.payload\n        };\n        state.error = null;\n      })\n      .addCase(fetchAWSStatus.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      // Handle fetchAllMetrics\n      .addCase(fetchAllMetrics.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchAllMetrics.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.data = {\n          ...state.data,\n          ...action.payload\n        };\n        state.error = null;\n      })\n      .addCase(fetchAllMetrics.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      });\n  },\n});\n\n// Selectors\nexport const selectEC2Instances = state => state.awsServices.data.ec2 || [];\nexport const selectRDSInstances = state => state.awsServices.data.rds || [];\nexport const selectAPMMetrics = state => state.awsServices.data.apm;\nexport const selectRUMMetrics = state => state.awsServices.data.rum;\nexport const selectStatus = state => state.awsServices.status;\nexport const selectError = state => state.awsServices.error;\n\nexport default awsServicesSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}