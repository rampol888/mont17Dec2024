{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst initialState = {\n  data: {\n    ec2: [],\n    rds: [],\n    apm: null,\n    rum: null,\n    cloudMetrics: null,\n    cpuMetrics: null\n  },\n  status: 'idle',\n  error: null\n};\n\n// Fetch EC2 and RDS instance data\nexport const fetchAWSStatus = createAsyncThunk('awsServices/fetchStatus', async () => {\n  try {\n    const [statusRes, instancesRes, rdsRes] = await Promise.all([fetch('http://localhost:5001/api/status'), fetch('http://localhost:5001/api/instances'), fetch('http://localhost:5001/api/rds-instances')]);\n    if (!statusRes.ok || !instancesRes.ok || !rdsRes.ok) {\n      throw new Error('Failed to fetch AWS metrics');\n    }\n    const [status, instances, rds] = await Promise.all([statusRes.json(), instancesRes.json(), rdsRes.json()]);\n    return {\n      status,\n      instances,\n      rds\n    };\n  } catch (error) {\n    console.error('Fetch error:', error);\n    throw error;\n  }\n});\n\n// Fetch all monitoring metrics\nexport const fetchAllMetrics = createAsyncThunk('awsServices/fetchAllMetrics', async () => {\n  try {\n    const responses = await Promise.all([fetch('http://localhost:5001/api/status'), fetch('http://localhost:5001/api/apm-metrics'), fetch('http://localhost:5001/api/cloud-metrics'), fetch('http://localhost:5001/api/rum-metrics'), fetch('http://localhost:5001/api/db-metrics'), fetch('http://localhost:5001/api/disk-metrics')]);\n    if (!responses.every(res => res.ok)) {\n      throw new Error('Failed to fetch one or more metrics');\n    }\n    const [basic, apm, cloud, rum, db, disk] = await Promise.all(responses.map(res => res.json()));\n    return {\n      basic,\n      apm,\n      cloud,\n      rum,\n      dbMetrics: db,\n      diskMetrics: disk\n    };\n  } catch (error) {\n    console.error('Fetch error:', error);\n    throw error;\n  }\n});\nconst awsServicesSlice = createSlice({\n  name: 'awsServices',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder\n    // Handle fetchAWSStatus\n    .addCase(fetchAWSStatus.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchAWSStatus.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.data = {\n        ...state.data,\n        ...action.payload\n      };\n      state.error = null;\n    }).addCase(fetchAWSStatus.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    })\n    // Handle fetchAllMetrics\n    .addCase(fetchAllMetrics.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchAllMetrics.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.data = {\n        ...state.data,\n        ...action.payload\n      };\n      state.error = null;\n    }).addCase(fetchAllMetrics.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\n\n// Selectors\nexport const selectEC2Instances = state => state.awsServices.data.ec2 || [];\nexport const selectRDSInstances = state => state.awsServices.data.rds || [];\nexport const selectAPMMetrics = state => state.awsServices.data.apm;\nexport const selectRUMMetrics = state => state.awsServices.data.rum;\nexport const selectStatus = state => state.awsServices.status;\nexport const selectError = state => state.awsServices.error;\nexport default awsServicesSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","data","ec2","rds","apm","rum","cloudMetrics","cpuMetrics","status","error","fetchAWSStatus","statusRes","instancesRes","rdsRes","Promise","all","fetch","ok","Error","instances","json","console","fetchAllMetrics","responses","every","res","basic","cloud","db","disk","map","dbMetrics","diskMetrics","awsServicesSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","selectEC2Instances","awsServices","selectRDSInstances","selectAPMMetrics","selectRUMMetrics","selectStatus","selectError","reducer"],"sources":["/Users/pradeepn/monitoringservice/aws-monitor/frontend/src/features/awsServices/awsServicesSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nconst initialState = {\n  data: {\n    ec2: [],\n    rds: [],\n    apm: null,\n    rum: null,\n    cloudMetrics: null,\n    cpuMetrics: null\n  },\n  status: 'idle',\n  error: null\n};\n\n// Fetch EC2 and RDS instance data\nexport const fetchAWSStatus = createAsyncThunk(\n  'awsServices/fetchStatus',\n  async () => {\n    try {\n      const [statusRes, instancesRes, rdsRes] = await Promise.all([\n        fetch('http://localhost:5001/api/status'),\n        fetch('http://localhost:5001/api/instances'),\n        fetch('http://localhost:5001/api/rds-instances')\n      ]);\n\n      if (!statusRes.ok || !instancesRes.ok || !rdsRes.ok) {\n        throw new Error('Failed to fetch AWS metrics');\n      }\n\n      const [status, instances, rds] = await Promise.all([\n        statusRes.json(),\n        instancesRes.json(),\n        rdsRes.json()\n      ]);\n\n      return {\n        status,\n        instances,\n        rds\n      };\n    } catch (error) {\n      console.error('Fetch error:', error);\n      throw error;\n    }\n  }\n);\n\n// Fetch all monitoring metrics\nexport const fetchAllMetrics = createAsyncThunk(\n  'awsServices/fetchAllMetrics',\n  async () => {\n    try {\n      const responses = await Promise.all([\n        fetch('http://localhost:5001/api/status'),\n        fetch('http://localhost:5001/api/apm-metrics'),\n        fetch('http://localhost:5001/api/cloud-metrics'),\n        fetch('http://localhost:5001/api/rum-metrics'),\n        fetch('http://localhost:5001/api/db-metrics'),\n        fetch('http://localhost:5001/api/disk-metrics')\n      ]);\n\n      if (!responses.every(res => res.ok)) {\n        throw new Error('Failed to fetch one or more metrics');\n      }\n\n      const [basic, apm, cloud, rum, db, disk] = await Promise.all(\n        responses.map(res => res.json())\n      );\n\n      return {\n        basic,\n        apm,\n        cloud,\n        rum,\n        dbMetrics: db,\n        diskMetrics: disk\n      };\n    } catch (error) {\n      console.error('Fetch error:', error);\n      throw error;\n    }\n  }\n);\n\nconst awsServicesSlice = createSlice({\n  name: 'awsServices',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      // Handle fetchAWSStatus\n      .addCase(fetchAWSStatus.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchAWSStatus.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.data = {\n          ...state.data,\n          ...action.payload\n        };\n        state.error = null;\n      })\n      .addCase(fetchAWSStatus.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      // Handle fetchAllMetrics\n      .addCase(fetchAllMetrics.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchAllMetrics.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.data = {\n          ...state.data,\n          ...action.payload\n        };\n        state.error = null;\n      })\n      .addCase(fetchAllMetrics.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      });\n  },\n});\n\n// Selectors\nexport const selectEC2Instances = state => state.awsServices.data.ec2 || [];\nexport const selectRDSInstances = state => state.awsServices.data.rds || [];\nexport const selectAPMMetrics = state => state.awsServices.data.apm;\nexport const selectRUMMetrics = state => state.awsServices.data.rum;\nexport const selectStatus = state => state.awsServices.status;\nexport const selectError = state => state.awsServices.error;\n\nexport default awsServicesSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}