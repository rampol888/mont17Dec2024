{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nexport const fetchAWSStatus = createAsyncThunk('awsServices/fetchStatus', async () => {\n  try {\n    const response = await fetch('http://localhost:5000/api/status');\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  } catch (error) {\n    throw error;\n  }\n});\nconst initialState = {\n  data: null,\n  status: 'idle',\n  error: null\n};\nconst awsServicesSlice = createSlice({\n  name: 'awsServices',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchAWSStatus.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchAWSStatus.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.data = action.payload;\n      state.error = null;\n    }).addCase(fetchAWSStatus.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport default awsServicesSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchAWSStatus","response","fetch","ok","Error","json","error","initialState","data","status","awsServicesSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","reducer"],"sources":["/Users/pradeepn/monitoringservice/aws-monitor/frontend/src/features/awsServices/awsServicesSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nexport const fetchAWSStatus = createAsyncThunk(\n  'awsServices/fetchStatus',\n  async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/status');\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    } catch (error) {\n      throw error;\n    }\n  }\n);\n\nconst initialState = {\n  data: null,\n  status: 'idle',\n  error: null\n};\n\nconst awsServicesSlice = createSlice({\n  name: 'awsServices',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchAWSStatus.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchAWSStatus.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.data = action.payload;\n        state.error = null;\n      })\n      .addCase(fetchAWSStatus.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      });\n  },\n});\n\nexport default awsServicesSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,OAAO,MAAMC,cAAc,GAAGD,gBAAgB,CAC5C,yBAAyB,EACzB,YAAY;EACV,IAAI;IACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,CAAC;IAChE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CACF,CAAC;AAED,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE,IAAI;EACVC,MAAM,EAAE,MAAM;EACdH,KAAK,EAAE;AACT,CAAC;AAED,MAAMI,gBAAgB,GAAGZ,WAAW,CAAC;EACnCa,IAAI,EAAE,aAAa;EACnBJ,YAAY;EACZK,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACf,cAAc,CAACgB,OAAO,EAAGC,KAAK,IAAK;MAC1CA,KAAK,CAACR,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDM,OAAO,CAACf,cAAc,CAACkB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACpDF,KAAK,CAACR,MAAM,GAAG,WAAW;MAC1BQ,KAAK,CAACT,IAAI,GAAGW,MAAM,CAACC,OAAO;MAC3BH,KAAK,CAACX,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACDS,OAAO,CAACf,cAAc,CAACqB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MACnDF,KAAK,CAACR,MAAM,GAAG,QAAQ;MACvBQ,KAAK,CAACX,KAAK,GAAGa,MAAM,CAACb,KAAK,CAACgB,OAAO;IACpC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAeZ,gBAAgB,CAACa,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}