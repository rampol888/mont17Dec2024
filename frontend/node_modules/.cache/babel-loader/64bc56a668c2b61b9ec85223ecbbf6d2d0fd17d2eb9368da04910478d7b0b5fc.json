{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst API_BASE_URL = 'http://localhost:5001';\nexport const fetchAWSStatus = createAsyncThunk('awsServices/fetchStatus', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    console.log('Fetching AWS status...');\n    const response = await fetch(`${API_BASE_URL}/api/status`);\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => null);\n      console.error('API Error:', errorData);\n      return rejectWithValue((errorData === null || errorData === void 0 ? void 0 : errorData.error) || 'API request failed');\n    }\n    const data = await response.json();\n    console.log('AWS status data:', data);\n    return data;\n  } catch (error) {\n    console.error('Fetch error:', error);\n    return rejectWithValue(error.message);\n  }\n});\nconst initialState = {\n  data: null,\n  status: 'idle',\n  error: null\n};\nconst awsServicesSlice = createSlice({\n  name: 'awsServices',\n  initialState,\n  reducers: {\n    clearError: state => {\n      state.error = null;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchAWSStatus.pending, state => {\n      state.status = 'loading';\n      state.error = null;\n    }).addCase(fetchAWSStatus.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.data = action.payload;\n      state.error = null;\n    }).addCase(fetchAWSStatus.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload || 'Unknown error occurred';\n    });\n  }\n});\nexport const {\n  clearError\n} = awsServicesSlice.actions;\nexport default awsServicesSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","API_BASE_URL","fetchAWSStatus","_","rejectWithValue","console","log","response","fetch","ok","errorData","json","catch","error","data","message","initialState","status","awsServicesSlice","name","reducers","clearError","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","reducer"],"sources":["/Users/pradeepn/monitoringservice/aws-monitor/frontend/src/features/awsServices/awsServicesSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nconst API_BASE_URL = 'http://localhost:5001';\n\nexport const fetchAWSStatus = createAsyncThunk(\n  'awsServices/fetchStatus',\n  async (_, { rejectWithValue }) => {\n    try {\n      console.log('Fetching AWS status...');\n      const response = await fetch(`${API_BASE_URL}/api/status`);\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => null);\n        console.error('API Error:', errorData);\n        return rejectWithValue(errorData?.error || 'API request failed');\n      }\n\n      const data = await response.json();\n      console.log('AWS status data:', data);\n      return data;\n    } catch (error) {\n      console.error('Fetch error:', error);\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\nconst initialState = {\n  data: null,\n  status: 'idle',\n  error: null\n};\n\nconst awsServicesSlice = createSlice({\n  name: 'awsServices',\n  initialState,\n  reducers: {\n    clearError: (state) => {\n      state.error = null;\n    }\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchAWSStatus.pending, (state) => {\n        state.status = 'loading';\n        state.error = null;\n      })\n      .addCase(fetchAWSStatus.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.data = action.payload;\n        state.error = null;\n      })\n      .addCase(fetchAWSStatus.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.payload || 'Unknown error occurred';\n      });\n  },\n});\n\nexport const { clearError } = awsServicesSlice.actions;\nexport default awsServicesSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,MAAMC,YAAY,GAAG,uBAAuB;AAE5C,OAAO,MAAMC,cAAc,GAAGF,gBAAgB,CAC5C,yBAAyB,EACzB,OAAOG,CAAC,EAAE;EAAEC;AAAgB,CAAC,KAAK;EAChC,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IACrC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,YAAY,aAAa,CAAC;IAE1D,IAAI,CAACM,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,MAAM,IAAI,CAAC;MACzDP,OAAO,CAACQ,KAAK,CAAC,YAAY,EAAEH,SAAS,CAAC;MACtC,OAAON,eAAe,CAAC,CAAAM,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEG,KAAK,KAAI,oBAAoB,CAAC;IAClE;IAEA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACI,IAAI,CAAC,CAAC;IAClCN,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEQ,IAAI,CAAC;IACrC,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOD,KAAK,EAAE;IACdR,OAAO,CAACQ,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACpC,OAAOT,eAAe,CAACS,KAAK,CAACE,OAAO,CAAC;EACvC;AACF,CACF,CAAC;AAED,MAAMC,YAAY,GAAG;EACnBF,IAAI,EAAE,IAAI;EACVG,MAAM,EAAE,MAAM;EACdJ,KAAK,EAAE;AACT,CAAC;AAED,MAAMK,gBAAgB,GAAGnB,WAAW,CAAC;EACnCoB,IAAI,EAAE,aAAa;EACnBH,YAAY;EACZI,QAAQ,EAAE;IACRC,UAAU,EAAGC,KAAK,IAAK;MACrBA,KAAK,CAACT,KAAK,GAAG,IAAI;IACpB;EACF,CAAC;EACDU,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACvB,cAAc,CAACwB,OAAO,EAAGJ,KAAK,IAAK;MAC1CA,KAAK,CAACL,MAAM,GAAG,SAAS;MACxBK,KAAK,CAACT,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACDY,OAAO,CAACvB,cAAc,CAACyB,SAAS,EAAE,CAACL,KAAK,EAAEM,MAAM,KAAK;MACpDN,KAAK,CAACL,MAAM,GAAG,WAAW;MAC1BK,KAAK,CAACR,IAAI,GAAGc,MAAM,CAACC,OAAO;MAC3BP,KAAK,CAACT,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACDY,OAAO,CAACvB,cAAc,CAAC4B,QAAQ,EAAE,CAACR,KAAK,EAAEM,MAAM,KAAK;MACnDN,KAAK,CAACL,MAAM,GAAG,QAAQ;MACvBK,KAAK,CAACT,KAAK,GAAGe,MAAM,CAACC,OAAO,IAAI,wBAAwB;IAC1D,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAER;AAAW,CAAC,GAAGH,gBAAgB,CAACa,OAAO;AACtD,eAAeb,gBAAgB,CAACc,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}